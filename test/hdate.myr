use std
use testr
use date
use hdate

type n_period_test = struct
	input : byte[:]
	periods : date.period[:]
;;

const main = {
	var now = date.utcnow()

	var n_time_ago_tests : n_period_test[:] = [
		[.input="now", .periods=[][:]],
		[.input="today", .periods=[][:]],
		[.input="yesterday", .periods=[`date.Day 1][:]],
		[.input="the day before yesterday", .periods=[`date.Day 2][:]],
		[.input="last week", .periods=[`date.Day 7][:]],
		[.input="3 sec ago", .periods=[`date.Second 3][:]],
		[.input="1 second ago", .periods=[`date.Second 1][:]],
		[.input="3 seconds ago", .periods=[`date.Second 3][:]],
		[.input="3 min ago", .periods=[`date.Minute 3][:]],
		[.input="3 mins ago", .periods=[`date.Minute 3][:]],
		[.input="1 minute ago", .periods=[`date.Minute 1][:]],
		[.input="3 minutes ago", .periods=[`date.Minute 3][:]],
		[.input="3 hr ago", .periods=[`date.Hour 3][:]],
		[.input="3 hrs ago", .periods=[`date.Hour 3][:]],
		[.input="1 hour ago", .periods=[`date.Hour 1][:]],
		[.input="3 hours ago", .periods=[`date.Hour 3][:]],
		[.input="1 day ago", .periods=[`date.Day 1][:]],
		[.input="3 days ago", .periods=[`date.Day 3][:]],
		[.input="1 week ago", .periods=[`date.Day 7][:]],
		[.input="3 weeks ago", .periods=[`date.Day 21][:]],
		[.input="1 month ago", .periods=[`date.Month 1][:]],
		[.input="3 months ago", .periods=[`date.Month 3][:]],
		[.input="1 year ago", .periods=[`date.Year 1][:]],
		[.input="3 years ago", .periods=[`date.Year 3][:]],
		[.input="3 years and 2 months ago", .periods=[`date.Year 3, `date.Month 2][:]],
		[.input="3 years, 2 months and 5 days ago", .periods=[`date.Year 3, `date.Month 2, `date.Day 5][:]],
	][:]
	var n_time_from_now_tests : n_period_test[:] = [
		[.input="tomorrow", .periods=[`date.Day 1][:]],
		[.input="the day after tomorrow", .periods=[`date.Day 2][:]],
		[.input="next week", .periods=[`date.Day 7][:]],
		[.input="3 sec from now", .periods=[`date.Second 3][:]],
		[.input="1 second from now", .periods=[`date.Second 1][:]],
		[.input="3 seconds from now", .periods=[`date.Second 3][:]],
		[.input="3 min from now", .periods=[`date.Minute 3][:]],
		[.input="3 mins from now", .periods=[`date.Minute 3][:]],
		[.input="1 minute from now", .periods=[`date.Minute 1][:]],
		[.input="3 minutes from now", .periods=[`date.Minute 3][:]],
		[.input="3 hr from now", .periods=[`date.Hour 3][:]],
		[.input="3 hrs from now", .periods=[`date.Hour 3][:]],
		[.input="1 hour from now", .periods=[`date.Hour 1][:]],
		[.input="3 hours from now", .periods=[`date.Hour 3][:]],
		[.input="1 day from now", .periods=[`date.Day 1][:]],
		[.input="3 days from now", .periods=[`date.Day 3][:]],
		[.input="1 week from now", .periods=[`date.Day 7][:]],
		[.input="3 weeks from now", .periods=[`date.Day 21][:]],
		[.input="1 month from now", .periods=[`date.Month 1][:]],
		[.input="3 months from now", .periods=[`date.Month 3][:]],
		[.input="1 year from now", .periods=[`date.Year 1][:]],
		[.input="3 years from now", .periods=[`date.Year 3][:]],
		[.input="3 years and 2 months from now", .periods=[`date.Year 3, `date.Month 2][:]],
		[.input="3 years and 2 months and 5 days from now", .periods=[`date.Year 3, `date.Month 2, `date.Day 5][:]],
	][:]

	testr.run([
		[.name="n_time_ago", .fn={ctx
			for t : n_time_ago_tests
				checkdate(ctx, t.input, subperiods(now, t.periods))
			;;
		}],
		[.name="n_time_from_now", .fn={ctx
			for t : n_time_from_now_tests
				checkdate(ctx, t.input, addperiods(now, t.periods))
			;;
		}],
	][:])
}

const subperiods = {d : date.instant, dts : date.period[:] -> date.instant
	for dt : dts
		d = date.subperiod(d, dt)
	;;
	-> d
}

const addperiods = {d : date.instant, dts : date.period[:] -> date.instant
	for dt : dts
		d = date.addperiod(d, dt)
	;;
	-> d
}

const checkdate = {ctx : testr.ctx#, a : byte[:], b : date.instant
	match hdate.parseh(a)
	| `std.Ok n:
		var as = std.fmt("{}", n)
		var bs = std.fmt("{}", b)
		testr.check(ctx, std.eq(as, bs), std.fmt("{}: {} != {}", a, as, bs))
	| `std.Err e:
		testr.fail(ctx, "got none")
	;;
}
