use date
use std

pkg hdate =
	type parsefail = union
		`MissingSuffix
		`Unknown
	;;

	const parseh	: (s: byte[:]	-> std.result(date.instant, parsefail))
	const parsehl	: (s: byte[:]	-> std.result(date.instant, parsefail))
	const parsehz	: (s: byte[:], tz : byte[:]	-> std.result(date.instant, parsefail))
;;

const parseh = {s; -> parserelative(s)}

const parsehl = {s
	match parserelative(s)
	| `std.Ok d: -> `std.Ok date.mkinstant(d.actual, "local")
	| `std.Err e: -> `std.Err e
	;;
}

const parsehz = {s, tz
	match parserelative(s)
	| `std.Ok d: -> `std.Ok date.mkinstant(d.actual, tz)
	| `std.Err e: -> `std.Err e
	;;
}

const parserelative = {s
	var n = date.utcnow()

	match s
	| "now":                      -> `std.Ok n
	| "today":                    -> `std.Ok n
	| "tomorrow":                 -> `std.Ok date.addperiod(n, `date.Day 1)
	| "yesterday":                -> `std.Ok date.subperiod(n, `date.Day 1)
	| "the day after tomorrow":   -> `std.Ok date.addperiod(n, `date.Day 2)
	| "the day before yesterday": -> `std.Ok date.subperiod(n, `date.Day 2)
	| "last week":                -> `std.Ok date.subperiod(n, `date.Day 7)
	| "next week":                -> `std.Ok date.addperiod(n, `date.Day 7)
	| _:                          /* do nothing */
	;;

	var f

	if std.hassuffix(s, " ago")
		f = date.subperiod
	elif std.hassuffix(s, " from now")
		f = date.addperiod
	else
		-> `std.Err `MissingSuffix
	;;

	s = s[:s.len-4]

	for t : strsplitm(s, [", ", ", and ", " and "][:])
		match parseperiod(t)
		| `std.Some p: n = f(n, p)
		| `std.None:   -> `std.Err `Unknown
		;;
	;;

	-> `std.Ok n
}

const parseperiod = {s : byte[:] -> std.option(date.period)
	if std.hasprefix(s, "a ")
		s = s[2:]
	;;

	var tokens = std.strtok(s)
	var number = 1
	var result = `std.None

	for t : tokens
		match mkperiod(t, number)
		| `std.Some p:
			result = `std.Some p
			break
		| `std.None:
			match std.intparse(t)
			| `std.Some n: number = n
			| `std.None: break
			;;
		;;
	;;

	std.slfree(tokens)

	-> result
}

const mkperiod = {s, n -> std.option(date.period)
	var p

	match s
	| "sec":     p = `date.Second n
	| "second":  p = `date.Second n
	| "seconds": p = `date.Second n
	| "min":     p = `date.Minute n
	| "mins":    p = `date.Minute n
	| "minute":  p = `date.Minute n
	| "minutes": p = `date.Minute n
	| "hr":      p = `date.Hour n
	| "hrs":     p = `date.Hour n
	| "hour":    p = `date.Hour n
	| "hours":   p = `date.Hour n
	| "day":     p = `date.Day n
	| "days":    p = `date.Day n
	| "week":    p = `date.Day (7 * n)
	| "weeks":   p = `date.Day (7 * n)
	| "month":   p = `date.Month n
	| "months":  p = `date.Month n
	| "year":    p = `date.Year n
	| "years":   p = `date.Year n
	| _:         -> `std.None
	;;

	-> `std.Some p
}

const strfindfirst = {haytack, needles -> std.option((std.size, std.size))
	var result = `std.None

	for n : needles
		match std.strfind(haytack, n)
		| `std.Some x:
			match result
			| `std.Some (y, _):
				if x < y
					result = `std.Some (x, n.len)
				;;
			| `std.None:
				result = `std.Some (x, n.len)
			;;
		| _:
		;;
	;;

	-> result
}

const strsplitm = {input, delims -> strsplitmiter
	-> [.input=input, .delims=delims]
}

type strsplitmiter = struct
	input  : byte[:]
	delims : byte[:][:]
;;

impl iterable strsplitmiter -> byte[:] =
	__iternext__ = {itp, valp
		if itp.input.len == 0
			-> false
		;;

		match strfindfirst(itp.input, itp.delims)
		| `std.Some (p, l):
			valp# = itp.input[:p]
			itp.input = itp.input[p+l:]
		| `std.None:
			valp# = itp.input
			itp.input = itp.input[itp.input.len:]
		;;

		-> true
	}

	__iterfin__ = {itp, valp
		/* nothing to clean up */
	}
;;
